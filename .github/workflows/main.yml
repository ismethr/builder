name: Build releases

on:
  watch:
    types: started

jobs:
  build:
    if: github.event.repository.owner.id == github.event.sender.id
    name: Build ${{ matrix.model }}-${{ matrix.tag.version }}
    runs-on: ubuntu-20.04
    strategy:
      fail-fast: false
      matrix:
        model:
          - nanopi-r4s
          - nanopi-r5s
          - nanopi-r5s-mainline
          - x86_64
        tag:
          - type: stable
            version: openwrt-21.02
          - type: rc
            version: openwrt-22.03
        exclude:
          - { model: nanopi-r5s-mainline, tag: { type: stable, version: openwrt-21.02 } }

    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Set time zone
      run: sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Show system
      run: |
        lscpu
        free -h
        uname -a

    - name: Set release env
      run: |
        if [[ ${{ matrix.model }} == "nanopi-r5s-mainline" ]]; then
          echo "release=false" >> "$GITHUB_ENV"
        fi

    - name: Free disk space
      run: |
        sudo -E swapoff -a
        sudo -E rm -f /swapfile
        sudo -E docker image prune -a -f
        sudo -E systemctl stop docker
        sudo -E snap set system refresh.retain=2
        sudo -E apt-get -y purge dotnet* firefox clang* gcc-10* ghc* google* hhvm llvm* mono* mongo* mysql* openjdk* php* zulu*
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get clean
        sudo -E rm -rf /etc/mysql /etc/php /usr/lib/jvm /usr/libexec/docker /usr/local /usr/src/* /var/lib/docker /var/lib/gems /var/lib/mysql /var/lib/snapd /etc/skel /opt/{microsoft,az,hostedtoolcache,cni,mssql-tools,pipx} /usr/share/{az*,dotnet,swift,miniconda,gradle*,java,kotlinc,ri,sbt} /root/{.sbt,.local,.npm}
        sudo sed -i '/NVM_DIR/d;/skel/d' /root/{.bashrc,.profile}
        rm -rf ~/{.cargo,.dotnet,.rustup}
        [ -n "$AGENT_TOOLSDIRECTORY" ] && sudo rm -rf "$AGENT_TOOLSDIRECTORY"
        df -h

    - name: Init build dependencies
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E rm -rf /etc/apt/sources.list.d
        sudo -E apt-get update -y
        sudo -E apt-get install -y build-essential rsync asciidoc binutils bzip2 gawk gettext git libfuse-dev libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core p7zip p7zip-full msmtp texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx-ucl libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python3 python3-pip python3-ply haveged lrzsz device-tree-compiler scons android-sdk-libsparse-utils android-sdk-ext4-utils proxychains-ng
        echo "deb http://archive.ubuntu.com/ubuntu/ bionic-security main" | sudo tee -a /etc/apt/sources.list
        sudo -E apt-get update
        sudo -E apt-cache policy libssl1.0-dev
        sudo -E apt-get install -y libssl1.0-dev kmod
        sudo -E apt-get clean -y
        git config --global user.name 'GitHub Actions' && git config --global user.email 'noreply@github.com'
        df -h

    - name: Init Anycast Node
      run: |
        curl -L ${{ secrets.anycast }} -o anycast.tar.xz --progress-bar
        openssl enc -aes-256-cfb -pbkdf2 -d -k ${{ secrets.openssl_password }} -in anycast.tar.xz | tar -Jxf - && sudo bash init.sh

    - name: Compile Openwrt
      id: compileopenwrt
      run: |
        if [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          bash <(curl -sS ${{ secrets.script_url_nanopi_r5s }}) ${{ matrix.tag.type }}
        elif [ "${{ matrix.model }}" = "nanopi-r5s-mainline" ]; then
          bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }} r5s
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }} x86
        else
          bash <(curl -sS ${{ secrets.script_url_general }}) ${{ matrix.tag.type }}
        fi
        cd openwrt
        tags=$(git describe --abbrev=0 --tags)
        echo "latest_release=$tags" >>$GITHUB_ENV

    - name: Assemble Artifact
      id: assemble_artifact
      run: |
        mkdir -p rom info
        if [ "${{ matrix.model }}" = "nanopi-r4s" ]; then
          cp -a openwrt/bin/targets/rockchip/armv8/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/armv8/*-r4s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/armv8/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          cp -a rk356x_tools/out/*.gz rom/
          cp -a rk356x_tools/out/*.zip rom/
          cp -a rk356x_tools/out/*.txt info/
          cp -a rk356x_tools/out/*.buildinfo info/
        elif [ "${{ matrix.model }}" = "nanopi-r5s-mainline" ]; then
          cp -a openwrt/bin/targets/rockchip/armv8/*.img.gz rom/
          cp -a openwrt/bin/targets/rockchip/armv8/*-r5s.manifest info/manifest.txt
          cp -a openwrt/bin/targets/rockchip/armv8/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          cp -a openwrt/bin/targets/x86/64/*-ext4-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/64/*-squashfs-combined-efi.img.gz rom/
          cp -a openwrt/bin/targets/x86/64/*-generic-rootfs.tar.gz rom/
          cp -a openwrt/bin/targets/x86/64/*-x86-64-generic.manifest info/manifest.txt
          cp -a openwrt/bin/targets/x86/64/config.buildinfo info/config.buildinfo
          cd rom && sha256sum *gz > ../info/sha256sums.txt
        fi

    - name: Create release
      if: env.release != 'false'
      id: create_release
      uses: ncipollo/release-action@v1.11.1
      with:
        name: OpenWRT-${{ env.latest_release }}
        allowUpdates: true
        tag: ${{ env.latest_release }}
        commit: master
        replacesArtifacts: true
        token: ${{ secrets.workflow_token }}
        artifacts: rom/*

    - name: Install AliyunDrive CLI
      id: aliyundrive
      continue-on-error: true
      run: |
        sudo curl -L ${{ secrets.aliyundrive }} -o /bin/aliyundrive --progress-bar
        sudo chmod 0755 /bin/aliyundrive
        aliyun_token=`curl -s ${{ secrets.aliyun_token }} | openssl enc -aes-256-cfb -pbkdf2 -a -d -k ${{ secrets.token_dec }}`
        echo "refresh_token: '$aliyun_token'" > ~/.config/aliyunpan.yaml

    - name: Upload Firmware - hash
      id: upload-hash
      continue-on-error: true
      run: |
        if [ "${{ matrix.model }}" = "nanopi-r4s" ]; then
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r4s-ext4-sysupgrade.img.gz openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r4s-squashfs-sysupgrade.img.gz openwrt/hash/ || true
        elif [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-emmc.img.zip openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-squashfs-sysupgrade.img.gz openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-ext4-sysupgrade.img.gz openwrt/hash/ || true
        elif [ "${{ matrix.model }}" = "nanopi-r5s-mainline" ]; then
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-ext4-sysupgrade.img.gz openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-squashfs-sysupgrade.img.gz openwrt/hash/ || true
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/hash/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-generic-rootfs.tar.gz openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-ext4-combined-efi.img.gz openwrt/hash/ || true
          timeout 20m proxychains -q aliyundrive upload --retry 10 -f rom/*-squashfs-combined-efi.img.gz openwrt/hash/ || true
        fi
    - name: Upload Firmware - releases
      id: upload-firmware
      continue-on-error: true
      run: |
        if [ "${{ matrix.model }}" = "nanopi-r4s" ]; then
          version=$(cat openwrt/version.txt)
          proxychains -q aliyundrive mkdir openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r4s-ext4-sysupgrade.img.gz openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r4s-squashfs-sysupgrade.img.gz openwrt/nanopi-r4s/releases/${{ matrix.tag.version }}/$version/ || true
        elif [ "${{ matrix.model }}" = "nanopi-r5s" ]; then
          version=$(cat openwrt/version.txt)
          proxychains -q aliyundrive mkdir openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-emmc.img.zip openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-squashfs-sysupgrade.img.gz openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-ext4-sysupgrade.img.gz openwrt/nanopi-r5s/releases/${{ matrix.tag.version }}/$version/ || true
        elif [ "${{ matrix.model }}" = "nanopi-r5s-mainline" ]; then
          version=$(cat openwrt/version.txt)
          proxychains -q aliyundrive mkdir openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-ext4-sysupgrade.img.gz openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-r5s-squashfs-sysupgrade.img.gz openwrt/nanopi-r5s/mainline/${{ matrix.tag.version }}/$version/ || true
        elif [ "${{ matrix.model }}" = "x86_64" ]; then
          version=$(cat openwrt/version.txt)
          proxychains -q aliyundrive mkdir openwrt/x86_64/releases/${{ matrix.tag.version }}/$version
          proxychains -q aliyundrive upload --retry 10 -f info/manifest.txt openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/config.buildinfo openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
          proxychains -q aliyundrive upload --retry 10 -f info/sha256sums.txt openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-generic-rootfs.tar.gz openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-ext4-combined-efi.img.gz openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
          timeout 15m proxychains -q aliyundrive upload --retry 10 -f rom/*-squashfs-combined-efi.img.gz openwrt/x86_64/releases/${{ matrix.tag.version }}/$version/ || true
        fi
